"""initial

Revision ID: 6a346b801c88
Revises:
Create Date: 2023-12-20 14:37:52.362677

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "6a346b801c88"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # RSC Custom code BEGIN
    op.execute("DROP TYPE IF EXISTS seatstatus")
    # RSC Custom code END
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "event_log",
        sa.Column(
            "timestamp",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("event_type", sa.String(length=256), nullable=False),
        sa.Column("event_version", sa.Integer(), nullable=False),
        sa.Column(
            "event_payload", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("is_exported", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_event_log")),
    )
    op.create_index(
        op.f("ix_event_log_created_at"), "event_log", ["created_at"], unique=False
    )
    op.create_index(
        op.f("ix_event_log_event_type"), "event_log", ["event_type"], unique=False
    )
    op.create_index(op.f("ix_event_log_id"), "event_log", ["id"], unique=False)
    op.create_index(
        op.f("ix_event_log_is_exported"), "event_log", ["is_exported"], unique=False
    )
    op.create_index(
        op.f("ix_event_log_timestamp"), "event_log", ["timestamp"], unique=False
    )
    op.create_table(
        "license",
        sa.Column("uuid", sa.UUID(), nullable=False),
        sa.Column("hierarchy_provider_uri", sa.String(length=256), nullable=False),
        sa.Column("product_eid", sa.String(length=256), nullable=False),
        sa.Column("manager_eid", sa.String(length=256), nullable=False),
        sa.Column("owner_type", sa.String(length=256), nullable=False),
        sa.Column("owner_level", sa.Integer(), nullable=False),
        sa.Column(
            "owner_eids", postgresql.ARRAY(sa.String(length=255)), nullable=False
        ),
        sa.Column("valid_from", sa.Date(), nullable=False),
        sa.Column("valid_to", sa.Date(), nullable=False),
        sa.Column("nof_seats", sa.Integer(), nullable=False),
        sa.Column("extra_seats", sa.Integer(), nullable=False),
        sa.Column("order_id", sa.String(length=256), nullable=True),
        sa.Column("is_trial", sa.Boolean(), nullable=False),
        sa.Column("notes", sa.String(length=4096), nullable=True),
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_license")),
        sa.UniqueConstraint(
            "product_eid",
            "hierarchy_provider_uri",
            "manager_eid",
            "owner_type",
            "owner_eids",
            "valid_from",
            "valid_to",
            name=op.f("uq_license_product_eid"),
        ),
    )
    op.create_index(
        op.f("ix_license_created_at"), "license", ["created_at"], unique=False
    )
    op.create_index(
        op.f("ix_license_hierarchy_provider_uri"),
        "license",
        ["hierarchy_provider_uri"],
        unique=False,
    )
    op.create_index(op.f("ix_license_id"), "license", ["id"], unique=False)
    op.create_index(op.f("ix_license_is_trial"), "license", ["is_trial"], unique=False)
    op.create_index(
        op.f("ix_license_manager_eid"), "license", ["manager_eid"], unique=False
    )
    op.create_index(op.f("ix_license_order_id"), "license", ["order_id"], unique=False)
    op.create_index(
        op.f("ix_license_owner_eids"), "license", ["owner_eids"], unique=False
    )
    op.create_index(
        op.f("ix_license_owner_level"), "license", ["owner_level"], unique=False
    )
    op.create_index(
        op.f("ix_license_owner_type"), "license", ["owner_type"], unique=False
    )
    op.create_index(
        op.f("ix_license_product_eid"), "license", ["product_eid"], unique=False
    )
    op.create_index(op.f("ix_license_uuid"), "license", ["uuid"], unique=False)
    op.create_index(
        op.f("ix_license_valid_from"), "license", ["valid_from"], unique=False
    )
    op.create_index(op.f("ix_license_valid_to"), "license", ["valid_to"], unique=False)
    op.create_table(
        "seat",
        sa.Column("ref_license", sa.BIGINT(), nullable=False),
        sa.Column("user_eid", sa.String(length=256), nullable=False),
        sa.Column("occupied_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_accessed_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("is_occupied", sa.Boolean(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "EXPIRED", "NOT_A_MEMBER", name="seatstatus"),
            nullable=False,
        ),
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["ref_license"], ["license.id"], name=op.f("fk_seat_ref_license_license")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_seat")),
    )
    op.create_index(op.f("ix_seat_created_at"), "seat", ["created_at"], unique=False)
    op.create_index(op.f("ix_seat_id"), "seat", ["id"], unique=False)
    op.create_index(op.f("ix_seat_is_occupied"), "seat", ["is_occupied"], unique=False)
    op.create_index(
        op.f("ix_seat_last_accessed_at"), "seat", ["last_accessed_at"], unique=False
    )
    op.create_index(op.f("ix_seat_occupied_at"), "seat", ["occupied_at"], unique=False)
    op.create_index(op.f("ix_seat_ref_license"), "seat", ["ref_license"], unique=False)
    op.create_index(op.f("ix_seat_status"), "seat", ["status"], unique=False)
    op.create_index(op.f("ix_seat_user_eid"), "seat", ["user_eid"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_seat_user_eid"), table_name="seat")
    op.drop_index(op.f("ix_seat_status"), table_name="seat")
    op.drop_index(op.f("ix_seat_ref_license"), table_name="seat")
    op.drop_index(op.f("ix_seat_occupied_at"), table_name="seat")
    op.drop_index(op.f("ix_seat_last_accessed_at"), table_name="seat")
    op.drop_index(op.f("ix_seat_is_occupied"), table_name="seat")
    op.drop_index(op.f("ix_seat_id"), table_name="seat")
    op.drop_index(op.f("ix_seat_created_at"), table_name="seat")
    op.drop_table("seat")
    op.drop_index(op.f("ix_license_valid_to"), table_name="license")
    op.drop_index(op.f("ix_license_valid_from"), table_name="license")
    op.drop_index(op.f("ix_license_uuid"), table_name="license")
    op.drop_index(op.f("ix_license_product_eid"), table_name="license")
    op.drop_index(op.f("ix_license_owner_type"), table_name="license")
    op.drop_index(op.f("ix_license_owner_level"), table_name="license")
    op.drop_index(op.f("ix_license_owner_eids"), table_name="license")
    op.drop_index(op.f("ix_license_order_id"), table_name="license")
    op.drop_index(op.f("ix_license_manager_eid"), table_name="license")
    op.drop_index(op.f("ix_license_is_trial"), table_name="license")
    op.drop_index(op.f("ix_license_id"), table_name="license")
    op.drop_index(op.f("ix_license_hierarchy_provider_uri"), table_name="license")
    op.drop_index(op.f("ix_license_created_at"), table_name="license")
    op.drop_table("license")
    op.drop_index(op.f("ix_event_log_timestamp"), table_name="event_log")
    op.drop_index(op.f("ix_event_log_is_exported"), table_name="event_log")
    op.drop_index(op.f("ix_event_log_id"), table_name="event_log")
    op.drop_index(op.f("ix_event_log_event_type"), table_name="event_log")
    op.drop_index(op.f("ix_event_log_created_at"), table_name="event_log")
    op.drop_table("event_log")
    # ### end Alembic commands ###
