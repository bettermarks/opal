import json
from typing import Dict, Any

from decouple import config, Choices

from services.licensing.data.repository import LicensingRepository
from services.licensing.data.sqlalchemy.unit_of_work import postgres_dsn
from services.licensing.data.unit_of_work import TransactionManager
from services.licensing.logging import LogLevel

log_level: str = config("LOG_LEVEL", default=LogLevel.DEBUG)
log_format: str = config(
    "LOG_FORMAT", default="console", cast=Choices(["console", "json"])
)

# DB settings
db_user: str = config("DB_USER")
db_password: str = config("DB_PASSWORD")
db_host: str = config("DB_HOST")
db_port: str = config("DB_PORT")
db_name: str = config("DB_NAME")

postgres_db_uri = postgres_dsn(db_host, db_port, db_user, db_password, db_name)


segment: str = config("SEGMENT")

apm_secret_token: str = config("APM_SECRET_TOKEN", default=None)  # secret
apm_url: str = config("APM_URL", default=None)
apm_enabled: str = config("APM_ENABLED", default=False, cast=bool)
apm_transaction_sample_rate: float = config(
    "APM_TRANSACTION_SAMPLE_RATE", default=0.1, cast=float
)

# Pagination settings
pagination_default_pagesize: int = config(
    "PAGINATION_DEFAULT_PAGESIZE", default=1000, cast=int
)
pagination_min_pagesize: int = config("PAGINATION_MIN_PAGESIZE", default=1, cast=int)
pagination_max_pagesize: int = config("PAGINATION_MAX_PAGESIZE", default=1000, cast=int)


# License common settings
trial_license_weeks: int = config("TRIAL_LICENSE_WEEKS", default=8, cast=int)

# JWT verification keys: a dict of specific format (see example in tests/conftest.py)
jwt_verification_keys: Dict[str, Any] = config(
    "JWT_VERIFICATION_KEYS",
    cast=lambda v: json.loads(v),
)

# Licensing Service URL is used in the permissions tokens
licensing_service_url: str = config("LICENSING_SERVICE_URL", default=None)
# the Licensing Service KID and attached private key for signing permissions token
licensing_service_kid: str = config(
    "LICENSING_SERVICE_KID", default="", cast=str
)  # secret
# the Licensing Service private key used for all tokens generated by the service ...
licensing_service_private_key: str = config(
    "LICENSING_SERVICE_PRIVATE_KEY",  # secret
    default="",
    cast=str,
)
# livetime of the 'permissions token' generated
permissions_token_livetime_secs = config(
    "PERMISSIONS_TOKEN_LIVETIME_SECS", default=86400
)

# TODO As the 'shop' is currently just running within the licensing service, the
# TODO following two settings should move to the shop service when created...
# TODO the SHOP Service KID and attached private key for signing 'shop' token
shop_service_kid: str = config("SHOP_SERVICE_KID", default="", cast=str)
# the Shop Service private key used for all tokens generated by the service ...
shop_service_private_key: str = config(
    "SHOP_SERVICE_PRIVATE_KEY",  # secret
    default="",
    cast=str,
)
# Invoice service configuration variables
shop_invoice_url: str = config("SHOP_INVOICE_URL", default="")
# Invoice service `BasicAuth` parameters
shop_invoice_auth_username: str = config("SHOP_INVOICE_AUTH_USERNAME", default="")
shop_invoice_auth_password: str = config("SHOP_INVOICE_AUTH_PASSWORD", default="")


# Eventlog export function: how to export events for further use ...
events_export_function = config(
    "EVENTS_EXPORT_FUNCTION",
    default="services.licensing.export.default_export.do_not_export_event",
)
# an optional modifier function for event type and payload before export
events_export_pre_export_hook = config(
    "EVENTS_EXPORT_EXPORT_HOOK",
    default="services.licensing.export.default_export.no_modification",
)

#
# TODO to be outsourced: These are event export specific settings only
#
# backend DB settings
bm_mongo_db_uri = config("MONGODB_URI", default="")  # secret!
bm_identity_encryption_pwd = config("BM_ENCRYPTION_PASSWORD", default="")  # secret
bm_data_event_api_url = config("DATA_EVENT_API_URL", default="")
bm_data_event_api_key = config("DATA_EVENT_API_KEY", default="")  # secret

# SDWH connection is just used for school mappings used in event export
# This should definitely go to a mapping service as soon as possible!
# Additionally, these settings should also be removed from general (open sourced)
# settings

# SDWH tunnel settings
bm_sdwh_ssh_host: str = config(
    "SDWH_HOST", default=config("SDWH_PRIVATE_IP", default="")
)  # secret
bm_sdwh_ssh_port: str = config("SDWH_PORT", default="")
bm_sdwh_ssh_user: str = config("SDWH_USER", default="")
bm_sdwh_ssh_private_key: str = config(
    "SDWH_HOST_PRIVATE_KEY", default="NOT_SET", cast=str
)

# SDWH DB settings
bm_sdwh_db_user: str = config("SDWH_DB_USER", default="")
bm_sdwh_db_password: str = config("SDWH_POSTGRES_SECRET", default="")  # secret
bm_sdwh_db_host: str = config("SDWH_DB_HOST", default="")
bm_sdwh_db_port: str = config("SDWH_DB_PORT", default="")
bm_sdwh_db_name: str = config("SDWH_DB_NAME", default="")


def repository(session: Any) -> LicensingRepository:
    """
    gets a persistance repository globally to be injected into
    endpoint handlers
    """
    from services.licensing.data.sqlalchemy.repository import (
        LicensingRepositorySqlalchemyImpl,
    )

    return LicensingRepositorySqlalchemyImpl(session)


def transaction_manager(implicit_commit: bool = False) -> TransactionManager:
    """
    gets the appropriate transaction manager globally to be
    injected into endpoint handlers
    """
    from services.licensing.data.sqlalchemy.unit_of_work import TransactionManagerImpl

    return TransactionManagerImpl(postgres_db_uri, implicit_commit=implicit_commit)
